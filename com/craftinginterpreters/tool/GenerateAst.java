package com.craftinginterpreters.tool;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

public class GenerateAst {
    private static String packageName = "com.craftinginterpreters.lox";
    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: generate_ast [output directory]");
            System.exit(1);
        }
        String outputDir = args[0];

        defineAst(outputDir, "Expr",
            Arrays.asList(
                "Binary : Expr left, Token operator, Expr right",
                "Grouping : Expr expression",
                "Literal : Object value",
                "Unary : Token operator, Expr right"
            ), false
        );
    }

    // Writes a java file with the full hierarchy.
    private static void defineAst(String outputDir, String baseName,
            List<String> types, boolean useList) throws IOException {
        String path = outputDir + "/" + baseName + ".java";
        PrintWriter writer = new PrintWriter(path, "UTF-8");

        writer.println("package " + packageName + ";");
        writer.println();
        if (useList) {
            writer.println("import java.util.List;");
            writer.println();
        }
        writer.println("// This class was generated by "
            + GenerateAst.class.toString() + ".\n// DO NOT EDIT MANUALLY!");
        writer.println("abstract class " + baseName + " {");

        for (String type : types) {
            String[] split = type.split(":");
            String className = split[0].trim();
            String[] fieldDecls = split[1].trim().split(",");
            defineType(writer, baseName, className, fieldDecls);
        }

        writer.println("}");
        writer.close();
    }

    // Writes a single type in the hierarchy with fields and a constructor that
    // initializes them.
    private static void defineType(PrintWriter writer, String baseName,
            String className, String[] fieldDecls) {
        writer.println("    static class " + className + " extends "
            + baseName + " {");
        
        // Field declarations
        for (String fieldDecl : fieldDecls) {
            String[] split = fieldDecl.trim().split(" ");
            writer.println("        final " + split[0] + " " + split[1] + ";");
        }
        
        // Constructor
        writer.println("        " + className + "(");
        // Constructor parameters
        int argsWritten = 0;
        for (String fieldDecl : fieldDecls) {
            String[] split = fieldDecl.trim().split(" ");
            if (argsWritten == fieldDecls.length - 1) {
                writer.println("            " + split[0] + " " + split[1]);
            } else {
                writer.println("            " + split[0] + " " + split[1] + ",");
            }
            argsWritten++;
        }
        writer.println("        ) {");
        // Field initialization in constructor
        for (String fieldDecl : fieldDecls) {
            String name = fieldDecl.trim().split(" ")[1];
            writer.println("            " + "this." + name + " = " + name + ";");
        }
        writer.println("        }");
        writer.println("    }");
    }
}