package com.craftinginterpreters.tool;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

public class GenerateAst {
    private static String packageName = "com.craftinginterpreters.lox";
    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: generate_ast [output directory]");
            System.exit(1);
        }
        String outputDir = args[0];

        defineAst(outputDir, "Expr", Arrays.asList(
            "Assign : Token name, Expr value",
            "Binary : Expr left, Token operator, Expr right",
            "Ternary : Expr left, Token leftOperator, Expr middle, " +
                "Token rightOperator, Expr right",
            "Grouping : Expr expression",
            "Literal : Object value",
            "Logical : Expr left, Token operator, Expr right",
            "Unary : Token operator, Expr right",
            "Call : Expr callee, Token paren, List<Expr> arguments",
            "Get : Expr object, Token name",
            "Set : Expr object, Token name, Expr value",
            "This : Token keyword",
            "Super : Token keyword, Token method",
            "Variable : Token name"
        ));

        defineAst(outputDir, "Stmt", Arrays.asList(
            "Expression : Expr expression",
            "Print : Expr expression",
            "If : Expr condition, Stmt thenBranch, Stmt elseBranch",
            "While : Expr condition, Stmt body",
            "Break : Token keyword",
            "Continue : Token keyword",
            "Return : Token keyword, Expr value",
            "Var : Token name, Expr initializer",
            "Function : Token name, List<Token> params, List<Stmt> body",
            "Class : Token name, Expr.Variable superclass, " +
                "List<Stmt.Function> methods",
            "Block : List<Stmt> statements"
        ));
    }

    // Writes a java file with the full hierarchy.
    private static void defineAst(String outputDir, String baseName,
            List<String> types) throws IOException {
        String path = outputDir + "/" + baseName + ".java";
        PrintWriter writer = new PrintWriter(path, "UTF-8");

        writer.println("package " + packageName + ";");
        writer.println();
        writer.println("import java.util.List;");
        writer.println();
        writer.println("// This class was generated by "
            + GenerateAst.class.toString() + ".\n// DO NOT EDIT MANUALLY!");
        writer.println("abstract class " + baseName + " {");

        defineVisitor(writer, baseName, types);
        writer.println();

        for (String type : types) {
            String[] split = type.split(":");
            String className = split[0].trim();
            String[] fieldDecls = split.length > 1 ?
                split[1].trim().split(",") : new String[0];
            defineType(writer, baseName, className, fieldDecls);
        }

        // The base `accept` method. All subclasses must implement it (simply
        // call the visitor's `visit` method and return the result).
        writer.println();
        writer.println("    abstract <R> R accept(Visitor<R> visitor);");

        writer.println("}");
        writer.close();
    }

    private static void defineVisitor(PrintWriter writer, String baseName,
            List<String> types) {
        writer.println("    interface Visitor<R> {");
        for (String type : types) {
            String typeName = type.split(":")[0].trim();
            writer.println("        R visit" + typeName + baseName + "(" +
                typeName + " " + baseName.toLowerCase() + ");");
        }
        writer.println("    }");
    }

    // Writes a single type in the hierarchy with fields and a constructor that
    // initializes them.
    private static void defineType(PrintWriter writer, String baseName,
            String className, String[] fieldDecls) {
        writer.println("    static class " + className + " extends "
            + baseName + " {");
        
        // Field declarations
        for (String fieldDecl : fieldDecls) {
            String[] split = fieldDecl.trim().split(" ");
            writer.println("        final " + split[0] + " " + split[1] + ";");
        }
        
        // Constructor
        writer.println();
        writer.println("        " + className + "(");
        // Constructor parameters
        int argsWritten = 0;
        for (String fieldDecl : fieldDecls) {
            String[] split = fieldDecl.trim().split(" ");
            if (argsWritten == fieldDecls.length - 1) {
                writer.println("            " + split[0] + " " + split[1]);
            } else {
                writer.println("            " + split[0] + " " + split[1] +
                    ",");
            }
            argsWritten++;
        }
        writer.println("        ) {");
        // Field initialization in constructor
        for (String fieldDecl : fieldDecls) {
            String name = fieldDecl.trim().split(" ")[1];
            writer.println("            " + "this." + name + " = " + name +
                ";");
        }
        writer.println("        }");

        // Visitor pattern
        writer.println();
        writer.println("        @Override");
        writer.println("        <R> R accept(Visitor<R> visitor) {");
        writer.println("            return visitor.visit" +
        className + baseName + "(this);"
        );
        writer.println("        }");

        writer.println("    }");
    }
}
